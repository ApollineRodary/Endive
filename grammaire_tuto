Ce ne sont que des suggestions/idées, il faut encore voir si c'est possible en pratique et si ça marche bien :) ! Si vous avez des modifications / suggestions, n'hésitez pas !


Idée générale :

Lemma id : forall P, P->P.      (point à la fin non obligatoire, saut à la ligne suffisant, Majuscule pas obligatoire)

Let P.
Suppose P.

Quand on tape "Goal?", ça donne :       (on a aussi envie d'avoir un environnement comme Coq avec hyp et goal quand on fait la preuve)
We want to prove : P.

Quand on tape "Hyp?", ça donne :
We have : P.
(Cette phrase reste plus tard si on ne supprime pas "Hyp?", comme ça si on enregistre le fichier, si qqun d'autre veut comprendre la preuve, il sait où on en est dans la preuve. Hyp? n'apparaît pas dans le fichier produit)

(So)? we have P.   
(So est optionnel, l'utilisateur peut l'utiliser pour rendre la preuve plus "littéraire"/ lisible mais ça n'a pas d'importance pour le côté math. On aura dans le même style : Then, Thus, Moreover...)

(Qed.)? option

Application d'un lemme :

Lemma id2 : forall P, forall Q, (on peut faire aussi forall P,Q) (P->Q)->(P->Q).

Let P.
Let Q.
Suppose P->Q.

By id with P->Q (we have P->Q)?.   we have P->Q optionnel ou s'écrit automatiquement ?

Qed.

Lemma pouet : forall P,Q,R, (P->Q)->(Q->R)->P->R.

Let P,Q,R.   (déclarations en une fois ok)

Suppose H1:(P->Q).   (H1 optional)

Suppose (Q->R).

Suppose P.

By (P->Q) (or H1) we have Q.  (possible côté maths P->Q?)

By (Q->R) we have R.

Qed.

Idée : fonctionnement par "bloc" avec des accolades (ou autre) qui séparent les blocs, ou indentation selon ce que préfère l'utilisateur. Comme ça dans un bloc, on a nos propres hyp / variables qui ne se retrouvent pas dans les autres (exemple de l'induction)

Constructeur and :

Lemma and : forall P,Q, P/\Q -> P.
Let P.
Let Q.
Suppose H:P/\Q. 
Thus we have P.
OU
We have P/\Q so P
OU
By H we have P.      (est ce que ça peut le faire automatiquement du côté mathématiques ou faut un mot clé style split?)
Qed.

Lemma and2 : forall P,Q, P->Q->P/\Q.
Let P,Q.
Suppose P.
Suppose Q.
We have P.
We have Q.
We have P/\Q.   (last 3 lines optional)
Qed.

Lemma and3 : forall A,B,C, ((A->B)->(B->C)->A->C)/\(B->B).

Let A,B,C.
Let us (first)? prove (A->B)->(B->C)->A->C.    ((A->B)->(B->C)->A->C proposé en autocompletion, ça devient le goal a montré tant qu'on a pas fini de le montrer)
By pouet with A B C (we have (A->B)->(B->C)->A->C).

Let us (now)? prove B->B.
Suppose B.
(Then, we have B.)?

(Thus, we have ((A->B)->(B->C)->A->C)/\(B->B).)   proposer autocomplétion

Qed.


Constructeur or :

Lemma or1 : forall A,B, A->A\/B.  (se lit A->(A\/B))

Let A.
Suppose A.
We have A (so we have A\/B)?.    autocompletion ?

Lemma or2 : forall P,Q,R, P\/Q->(P->R)->(Q->R)->R.

Let P,Q,R. 
Suppose H1:P\/Q.     (si on donne pas des noms à nos hyp, le fait tout seul et affichage si on fait Hyps?)
Suppose H2: P->R.
Suppose H3:Q->R.
(Let us prove)? by exhaustion with H1.

{Case 1: Suppose P.  (Cette ligne et la ligne Case 2 se sont écrites automatiquement et délimitent deux zones avec des hyps différentes (accolade??)
By H2 we have R.                      Je sais pas si c'est le mieux les accolades, à discuter...
}

{Case 2: Suppose Q.
By H3 we have R.
}
Thus we have R.    (autocomplétion)

Ce qu'on va avoir du côté maths:


demander à Greg pour la négation !!!
forall -> /\ \/ il existe
(entier naturel, si on écrit ça renvoie S S S 0)
